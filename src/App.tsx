import { useEffect, useState } from 'react'
import './App.css'
import CountUp from './component/CountUp'
import FlipWord from './component/FlipWord'
import HowToUse from './component/HowToUse'
import ReportResults from './component/ReportResults'
import SelectLabelLanguage from './component/SelectLabelLanguage'
import StatusBar from './component/StatusBar'
import { Labels, Word } from './types'

function App() {
  const [edit, setEdit] = useState(false)
  const [done, setDone] = useState(false)
  const [check, setCheck] = useState(false)
  const [countNo, setCountNo] = useState(0)
  const [countYes, setCountYes] = useState(0)
  const [count, setCount] = useState(0)
  const [language, setLanguage] = useState(1)

  const [words, setWords] = useState<Word[]>([
    { word: '?', meaning: '!', isKnown: false },
  ])

  const languages = ['English', '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'ÿπÿ±ÿ®Ÿä', '‚ùñ']
  const labels: Labels = {
    doKnow: ['I know this', '—è –∑–Ω–∞—é, —â–æ —Ü–µ', 'ÿßŸÜÿß ÿßÿπÿ±ŸÅ Ÿáÿ∞ÿß', '‚úî'],
    doNotKnow: ['Don\'t know', '–Ω–µ –∑–Ω–∞—é', 'ŸÑÿß ÿ£ÿπÿ±ŸÅ', '‚úï'],
    doAgain: ['Again', '–ó–Ω–æ–≤—É', 'ÿ™ŸÉÿ±ÿßÿ±ÿß', '‚ôª'],
    words: ['words', '—Å–ª–æ–≤–∞', 'ŸÉŸÑŸÖÿßÿ™', 'üëÑ'],
    howToCheck: ['Click the black box to see the word.',
      '–ö–ª–∞—Ü–Ω—ñ—Ç—å —á–æ—Ä–Ω–µ –ø–æ–ª–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ª–æ–≤–æ.',
      'ÿßŸÜŸÇÿ± ŸÅŸàŸÇ ÿßŸÑŸÖÿ±ÿ®ÿπ ÿßŸÑÿ£ÿ≥ŸàÿØ ŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑŸÉŸÑŸÖÿ©.', ''],
    howToProceed: ['Click green if you know this word, red if not.',
      '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–µ–ª–µ–Ω–∏–π, —è–∫—â–æ –≤–∏ –∑–Ω–∞—î—Ç–µ —Ü–µ —Å–ª–æ–≤–æ, —á–µ—Ä–≤–æ–Ω–∏–π, —è–∫—â–æ –Ω—ñ.',
      'ÿßŸÜŸÇÿ± ŸÅŸàŸÇ ÿßŸÑÿ£ÿÆÿ∂ÿ± ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ÿπÿ±ŸÅ Ÿáÿ∞Ÿá ÿßŸÑŸÉŸÑŸÖÿ© ÿå Ÿàÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ŸÉŸÜ ÿ™ÿπÿ±ŸÅŸáÿß ÿ®ÿßŸÑŸÑŸàŸÜ ÿßŸÑÿ£ÿ≠ŸÖÿ±.', ''],
    titleEditing: ['Edit the wordlist', '–í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤', 'ŸÇŸÖ ÿ®ÿ™ÿ≠ÿ±Ÿäÿ± ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÉŸÑŸÖÿßÿ™', 'üëÑüëÑ ‚Üí üëÑüëÑ'],
    doneEditing: ['Done', '–ì–æ—Ç–æ–≤–æ', 'ŸÅÿπŸÑŸá', '‚ô¶'],
  }


  const startwords: Word[] = [
    { word: 'Norsk', meaning: 'Norwegian', isKnown: false },
    { word: 'Hva heter du?', meaning: 'What is your name?', isKnown: false },
    { word: 'Jeg heter ...', meaning: 'My name is ...', isKnown: false },
    { word: 'Hvor kommer du fra?', meaning: 'Where are you from?', isKnown: false },
    { word: 'Jeg kommer fra ...', meaning: 'I am from ...', isKnown: false },
  ]
  /*
    ['Unnskyld meg', 'Excuse me', '–í–∏–±–∞—á—Ç–µ', 'ÿπŸÅŸàÿß'],
    ['Hva', 'what', '—â–æ', 'ŸÖÿßÿ∞ÿß ÿßŸà ŸÖÿß'],
    ['Hvor', 'where', '–¥–µ', 'ÿ£ŸäŸÜ'],
    ['Hvorfor', 'why', '—á–æ–º—É', 'ŸÑŸÖÿßÿ∞ÿß'],
    ['Hvordan', 'how', '—è–∫', 'ŸÉŸäŸÅ'],
    ['N√•r', 'when', '–∫–æ–ª–∏', 'ŸÖÿ™Ÿâ'],
    ['Mitt navn er', 'my name is', '–º–µ–Ω–µ –∑–≤–∞—Ç–∏', 'ÿßÿ≥ŸÖŸä ŸáŸà'],
    ['Hva heter du', 'what is your name', '—è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏', 'ŸÖÿß ÿßÿ≥ŸÖŸÉ'],
    ['Alder', 'age', '–≤—ñ–∫', 'ÿπŸÖÿ±'],
    ['Gammel', 'old', '—Å—Ç–∞—Ä–∏–π', 'ÿπŸÖÿ± ÿßŸà ŸÇÿØŸäŸÖ'],
    ['Jobb', 'job', '—Ä–æ–±–æ—Ç–∞', 'ŸÖŸáŸÜÿ©'],
    ['Utdanning', 'education', '–æ—Å–≤—ñ—Ç–∏', 'ÿßŸÑÿ™ÿπŸÑŸäŸÖ'],
    ['Familie', 'family', '—Ä–æ–¥–∏–Ω–∞', 'ÿ£ÿ≥ÿ±ÿ©'],
    ['Barn', 'children', '–¥—ñ—Ç–µ–π', 'ÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ'],
    ['S√∏nn', 'son', '—Å–∏–Ω', 'ÿßÿ®ŸÜ'],
    ['Datter', 'daughter', '–¥–æ—á–∫–∞', 'ÿ®ŸÜÿ™'],
    ['Hus', 'House', '–ë—É–¥–∏–Ω–æ–∫', 'ŸÖŸÜÿ≤ŸÑ'],
    ['Bok', 'Book', '–∫–Ω–∏–≥–∞', 'ŸÉÿ™ÿßÿ®'],
    ['Bil', 'Car', '–∞–≤—Ç–æ–º–æ–±—ñ–ª—å', 'ÿ≥Ÿäÿßÿ±ÿßÿ™'],
    ['Katt', 'Cat', '–∫—ñ—à–∫–∞', 'ŸÇÿ∑'],
    ['Hund', 'Dog', '–ü–µ—Å', 'ŸÑŸÉŸÜ'],
    ['Glede', 'Joy', '–†–∞–¥—ñ—Å—Ç—å', 'ŸÖÿ±ÿ≠'],
    ['Sol', 'Sun', '—Å–æ–Ω—Ü–µ', 'ÿ¥ŸÖÿ≥'],
    ['S√∏ster', 'Sister', '—Å–µ—Å—Ç—Ä–∞', 'ÿ£ÿÆÿ™'],
    ['Bror', 'Brother', '–ë—Ä–∞—Ç', 'ÿ£ÿÆ'],
    ['Venn', 'Friend', '–î—Ä—É–≥', 'ÿµÿØŸäŸÇ'],
    ['Fjell', 'Mountain', '–ì–æ—Ä–∞', 'ÿ¨ÿ®ŸÑ'],
    ['Hav', 'Sea', '–º–æ—Ä–µ', 'ÿ®ÿ≠ÿ±'],
    ['skog', 'Forest', '–õ—ñ—Å', 'ÿ∫ÿßÿ®ÿ©'],
    ['Skjorte', 'Shirt', '–°–æ—Ä–æ—á–∫–∞', 'ŸÇŸÖŸäÿµ'],
    ['Genser', 'Sweater', '—Å–≤–µ—Ç—Ä', 'ÿ≥ÿ™ÿ±ÿ©'],
    ['Kjole', 'Dress', '–ü–ª–∞—Ç—Ç—è', 'ÿ®ÿØŸÑÿ©'],
    ['Jakke', 'Jacket', '–ü—ñ–¥–∂–∞–∫', 'ÿßŸÑÿ≥ÿ™ÿ±ÿ©'],
    ['Sko', 'Shoes', '–í–∑—É—Ç—Ç—è', 'ÿ£ÿ≠ÿ∞Ÿäÿ©'],
    ['St√∏vler', 'Boots', '–ß–æ–±–æ—Ç–∏', 'ÿ£ÿ≠ÿ∞Ÿäÿ©'],
    ['Skjerf', 'Scarf', '–®–∞—Ä—Ñ', 'ÿßŸÑÿ£Ÿàÿ¥ÿ≠ÿ©'],
    ['Belte', 'Belt', '–ü–æ—è—Å', 'ÿ≠ÿ≤ÿßŸÖ'],
    ['Sokker', 'Socks', '–®–∫–∞—Ä–ø–µ—Ç–∫–∏', 'ÿ¨Ÿàÿßÿ±ÿ®'],
    ['Regnjakke', 'Raincoat', '–î–æ—â–æ–≤–∏–∫', 'ŸÖÿπÿ∑ŸÅ ŸàÿßŸÇ ŸÖŸÜ ÿßŸÑŸÖÿ∑ÿ±'],
    ['Koffert', 'Suitcase', '–í–∞–ª—ñ–∑–∞', 'ÿ≠ŸÇŸäÿ®ÿ© ÿ≥ŸÅÿ±'],
    ['√òredobber', 'Earrings', '–°–µ—Ä–µ–∂–∫–∏', 'ÿ£ŸÇÿ±ÿßÿ∑'],
    ['Stol', 'Chair', '–°—Ç—ñ–ª–µ—Ü—å', 'ŸÉÿ±ÿ≥Ÿä'],
    ['Seng', 'Bed', '–õ—ñ–∂–∫–æ', 'ŸäÿµŸÑŸä'],
    ['Bord', 'Table', '–¢–∞–±–ª–∏—Ü—è', 'ÿßŸÑÿ∑ÿßŸàŸÑÿ©'],
    ['Skrivebord', 'desk', '–ü–∏—Å—å–º–æ–≤–∏–π —Å—Ç—ñ–ª', 'ÿ∑ÿßŸàŸÑÿ© ŸÖŸÉÿ™ÿ®'],
    ['Hyller', 'Shelves', '–ü–æ–ª–∏—Ü—ñ', 'ÿ£ÿ±ŸÅŸÅ'],
    ['Benk', 'Bench', '–õ–∞–≤–∞', 'ŸÖŸÇÿπÿØ'],
    ['Bokhylle', 'Bookshelf', '–ö–Ω–∏–∂–∫–æ–≤–∞ –ø–æ–ª–∏—Ü—è', 'ÿ±ŸÅ ÿßŸÑŸÉÿ™ÿ®'],
  ]
*/

  function isAtTheStart() {
    return count === 0
  }

  function isAtTheEnd() {
    return count > 0 && count < words.length
  }

  function nextWord() {
    console.log('word nr ', count, 'is known', words[count].isKnown, '');

    setCheck(false)
    if (count === words.length - 1) {
      calculateResult()
      setDone(true)
    } else {
      setCount(count + 1)
    }
  }


  function resetScore() {
    setCount(0)
    setCountNo(0)
    setCountYes(0)
    setDone(false)
  }

  function handleNo() {
    words[count].isKnown = false;
    setCountNo(countNo + 1)
    nextWord()
  }

  function handleYes() {
    words[count].isKnown = true;
    setCountYes(countYes + 1)
    nextWord()
  }

  function handleCheck() {
    setCheck(true)
  }

  function calculateResult() {
    const known = words.filter(word => word.isKnown).length;
    const unknown = words.filter(word => !word.isKnown).length;
    const score = Math.round(known / (words.length) * 100);
    const result = { known, unknown, score, words: words.length };
    console.log('score:', result);
    localStorage.setItem("flip", JSON.stringify({ words, result }))
  }

  useEffect(() => {
    const saved = localStorage.getItem("flip");
    console.log('saved', saved)
    if (!saved) {
      console.log('init saved')
      setWords(startwords)
    } else {
      const parsed = JSON.parse(saved)
      setWords(parsed.words)
    }

  }, [])

  function openEdit() {
    const moreWords = [{ word: '', meaning: '', isKnown: false }, { word: '', meaning: '', isKnown: false }, { word: '', meaning: '', isKnown: false }, { word: '', meaning: '', isKnown: false }, { word: '', meaning: '', isKnown: false }, ...words]
    setWords(moreWords)
    setEdit(true)
  }

  function closeEdit() {

    const filtered = words.filter(word => !(word.word === '' || word.meaning === ''))
    console.log('filtered', filtered);

    setWords(filtered)

    const known = filtered.filter(word => word.isKnown).length;
    const unknown = filtered.filter(word => !word.isKnown).length;
    const score = Math.round(known / (filtered.length) * 100);
    const result = { known, unknown, score, words: filtered.length };


    localStorage.setItem("flip", JSON.stringify({ words: filtered, result }))

    setEdit(false)

  }

  function handleWordChange(e: React.ChangeEvent<{ value: string }>, index: number) { // e = event, index = index of word
    console.log('handleWordChange', e.target.value, index);
    const newWords = [...words] // copy of words
    newWords[index].word = e.target.value // change word
    console.log('newWords', newWords);
    setWords(newWords) // set new words

    /*
    
    */
  }

  function handleMeaningChange(e: React.ChangeEvent<{ value: string }>, index: number) { // e = event, index = index of word
    console.log('handleMeaningChange', e.target.value, index);

    const newWords = [...words] // copy of words
    newWords[index].meaning = e.target.value // change word
    setWords(newWords) // set new words

  }

  return (
    <div className="App">

      {edit &&
        <div className='edit-wordlist'>
          <h2>{labels.titleEditing.at(language - 1)}</h2>
          <table>
            <tbody>
              {words.map((line, index) => {
                return (
                  <tr key={index}>
                    <td>
                      {index + 1}:&nbsp;
                    </td>
                    <td>
                      <input type="text"
                        value={line.word}
                        onChange={(e) => handleWordChange(e, index)}
                      />
                    </td>
                    <td>
                      <input type="text"
                        value={line.meaning}
                        onChange={(e) => handleMeaningChange(e, index)}
                      />
                    </td>
                    <td>
                      &nbsp;
                      {line.isKnown ? '‚úÖ' : '‚ùå'}
                    </td>
                  </tr>
                )
              })
              }
            </tbody>
          </table>
          <div className="button-row">
            <button className='button'
              onClick={() => closeEdit()}
            >{labels.doneEditing.at(language - 1)}</button>
          </div>
        </div>
      }

      {!edit &&
        <div>
          <img src="/logo.png" className="logo" alt="Spr√•kverksted logo" onClick={() => openEdit()} />

          <CountUp
            count={count}
            totalWords={words.length}
          />
          {!done &&
            <FlipWord
              check={check}
              count={count}
              handleCheck={handleCheck}
              handleNo={handleNo}
              handleYes={handleYes}
              language={language}
              words={words}
              labels={labels}
            />

          }
          {done &&
            <ReportResults
              countNo={countNo}
              countYes={countYes}
              totalWords={words.length}
              language={language}
              labels={labels}
              doAgain={resetScore}
            />
          }
          <footer>
            {isAtTheStart() &&
              <HowToUse
                language={language}
                labels={labels}
              />
            }
            {isAtTheEnd() &&
              <StatusBar
                countNo={countNo}
                countYes={countYes}
                totalWords={words.length}
              />
            }
          </footer >

          <SelectLabelLanguage
            languages={languages}
            language={language}
            setLanguage={setLanguage}
          />
          <hr />
          <details>
            <summary>This is just a prototype</summary>
            <div className='about-box'>
              Version 0.2 - 13.01.2023<br />
              Please suggest features to <a href="mailto:fredpallesen@gmail.com">Fred</a><br />
              or add an issue to the <a href="https://github.com/xparagon/flip2learn/issues">GitHub repo</a>.
            </div>
          </details>
        </div>
      }
    </div >

  )
}

export default App
